{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An Implementation of generic (polymorphic) lambdas using clang (llvm version 167560 [11/7/12]); based on C++ Portland October 2012 meeting","body":"# Generic Lambdas using Clang\r\nThis is an implementation of Generic Lambdas for C++ based on the [n3418: Proposal for Generic Lambda Expressions](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3418.pdf).\r\n\r\n### The current version (12/2012) implements subproposals 2.1, 2.2, 2.3 and 2.5.\r\n\r\n### 2.1 Allow the type-specifier within a parameter declaration of a lambda to be auto (i.e. auto is mandatory)\r\n    \r\n    auto Sum = [](auto a, decltype(a) b) { return a + b; };\r\n    int i = Sum(3, 4);\r\n    double d = Sum(3.14, 2.77);\r\n\r\n### 2.2 Allow the use of familiar template syntax in lambda expressions\r\n    auto NumElements = []<int N>(auto (&a)[N]) { return N; }; \r\n    int arri[]{1, 2, 3};\r\n    double arrd[]{3.14, 2.77, 6.626};\r\n    auto total = NumElements(arri) + NumElements(arrd);\r\n\r\n### 2.3 Permit a lambda body to be an expression\r\n\r\n    int local = 10;\r\n    auto L = [&](auto a) a + ++local;\r\n\r\n### 2.4 Named Lambda Syntax has NOT been implemented yet\r\n\r\n### 2.5 Autogenerate a conversion to function pointer in captureless generic lambdas\r\n    auto L = [](auto a, decltype(a) b) { return a + b; };\r\n    int (*fp)(int, int) = L;\r\n\r\n### I also used Richard Smith's (@zygoloid) return type deduction patch to allow the following\r\n\r\n    int local = 10;\r\n    auto L = [](auto &a) -> auto& { return a; };\r\n    ++L(local); \r\n\r\n### How to Compile the Code\r\n\r\n1. Download the appropriate version of llvm (167560) by following the instructions at : http://clang.llvm.org/get_started.html.  I use TortoiseSVN on windows, and if you do, be sure to download the correct version of llvm (167560)\r\n2. In the above instructions from the clang website, where it states to checkout clang using subversion (i.e step 3 svn co http://llvm.org/svn/llvm-project/cfe/trunk clang), instead install git (I use TortoiseGit on windows) and checkout this repository.\r\n3. Then follow the instructions as delineated on clangs website to compile and build clang.\r\n4. Once you have your clang binary, it should be able to compile your code and generate the executable that should run directly.  On windows, I find myself having to use the interpreter lli.exe.  So I do the following when trying to compile code in test.cpp:\r\n    clang -std=c++1y -c test.cpp -emit-llvm -o test.bc\r\n    lli test.bc\r\n\r\n### How to use the binaries:\r\n1. I have uploaded my most recent Debug build of generic-lambda-clang that was built using visual studio 2010 and lli.exe.\r\n2. In order for you to use it, you need certain debug dlls that I can not legally post here - An easy way is probably for you to install [Visual C++ 2010 Express (free)](http://www.microsoft.com/visualstudio/eng/downloads#d-express-windows-desktop).\r\n3. Download the windows exectutable [generic-lambda-clang.exe](https://www.sugarsync.com/pf/D6969703_69613999_6758815) along with the [llvm interpreter: lli.exe](https://www.sugarsync.com/pf/D6969703_65299173_039062) if you need it.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","name":"Generic Lambdas in C++ using Clang","google":""}